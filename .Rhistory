library(ggthemes)
# Import data
r <- GET("https://services1.arcgis.com/pWmBUdSlVpXStHU6/arcgis/rest/services/COVID19_Cases_DateReport/FeatureServer/0/query?f=json&where=1%3D1&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=DateReported%20asc&outSR=102100&resultOffset=0&resultRecordCount=32000&resultType=standard&cacheHint=true")
r_json <- content(r)
cases <- fromJSON(
r_json
)$features$attributes %>%
mutate(
DateReported = as_datetime(DateReported / 1000),
Date = as_date(DateReported)
)
# Construct the curve
incidence <- as.incidence(
cases$ReportedNewCases,
dates = cases$Date
)
# Plot incidence
plot(incidence)
# Estimate R
covid_parametric <- estimate_R(
incidence,
method = "parametric_si",
config = make_config(list(
mean_si = 3.96,
std_si = 4.75
))
)
R_df <- covid_parametric$R %>%
mutate(Date = date("2020-02-20") + t_end)
most_recent_date <- cases %>%
slice_tail(1) %>%
pull(Date)
most_recent_r <- R_df %>%
slice_tail(1) %>%
pull(`Mean(R)`)
case_table <- cases %>%
select(Date, ReportedNewCases, ReportedTotalCases) %>%
left_join(R_df %>% select(Date, `Mean(R)`))
# Plot R
png("RivCACOVID/incid.png", width = 800, height = 400)
incid <- plot(covid_parametric, "incid") +
scale_x_date(date_breaks = "1 month",
date_labels = "%B") +
theme_few()
incid
dev.off()
png("RivCACOVID/R.png", width = 800, height = 400)
plot(covid_parametric, "R", legend = FALSE)  +
theme_few() +
theme(legend.position = "none") +
coord_cartesian(ylim = c(0,3))
dev.off()
# Write data to cache
save(case_table, file = 'RivCACOVID/case_table.Rdata')
save(covid_parametric, file = 'RivCACOVID/covid_parametric.Rdata')
save(most_recent_date, file = 'RivCACOVID/most_recent_date.Rdata')
save(most_recent_r, file = 'RivCACOVID/most_recent_r.Rdata')
<<<<<<< HEAD
=======
shiny::runApp('RivCACOVID')
library(shiny)
library(incidence)
library(tidyverse)
# Import saved data
load('case_table.Rdata')
load('covid_parametric.Rdata')
print(covid_parametric)
load('most_recent_date.Rdata')
load('most_recent_r.Rdata')
# Get COVID Data from Riverside County ArcGIS
library(httr)
library(jsonlite)
library(tidyverse)
library(lubridate)
library(EpiEstim)
library(incidence)
library(RCurl)
library(ggthemes)
# Import data
r <- GET("https://services1.arcgis.com/pWmBUdSlVpXStHU6/arcgis/rest/services/COVID19_Cases_DateReport/FeatureServer/0/query?f=json&where=1%3D1&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=DateReported%20asc&outSR=102100&resultOffset=0&resultRecordCount=32000&resultType=standard&cacheHint=true")
r_json <- content(r)
cases <- fromJSON(
r_json
)$features$attributes %>%
mutate(
DateReported = as_datetime(DateReported / 1000),
Date = as_date(DateReported)
)
# Construct the curve
incidence <- as.incidence(
cases$ReportedNewCases,
dates = cases$Date
)
# Plot incidence
plot(incidence)
# Estimate R
covid_parametric <- estimate_R(
incidence,
method = "parametric_si",
config = make_config(list(
mean_si = 3.96,
std_si = 4.75
))
)
R_df <- covid_parametric$R %>%
mutate(Date = date("2020-02-20") + t_end)
most_recent_date <- cases %>%
slice_tail(1) %>%
pull(Date)
most_recent_r <- R_df %>%
slice_tail(1) %>%
pull(`Mean(R)`)
case_table <- cases %>%
select(Date, ReportedNewCases, ReportedTotalCases) %>%
left_join(R_df %>% select(Date, `Mean(R)`))
# Get COVID Data from Riverside County ArcGIS
>>>>>>> 0ad6dff1c2ec74e556db9f2119554f769784f079
library(httr)
library(jsonlite)
library(tidyverse)
library(lubridate)
library(EpiEstim)
library(incidence)
library(RCurl)
library(ggthemes)
# Import data
r <- GET("https://services1.arcgis.com/pWmBUdSlVpXStHU6/arcgis/rest/services/COVID19_Cases_DateReport/FeatureServer/0/query?f=json&where=1%3D1&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=DateReported%20asc&outSR=102100&resultOffset=0&resultRecordCount=32000&resultType=standard&cacheHint=true")
r_json <- content(r)
cases <- fromJSON(
r_json
)$features$attributes %>%
mutate(
DateReported = as_datetime(DateReported / 1000),
Date = as_date(DateReported)
)
# Construct the curve
incidence <- as.incidence(
cases$ReportedNewCases,
dates = cases$Date
)
# Plot incidence
plot(incidence)
# Estimate R
covid_parametric <- estimate_R(
incidence,
method = "parametric_si",
config = make_config(list(
mean_si = 3.96,
std_si = 4.75
))
)
R_df <- covid_parametric$R %>%
mutate(Date = date("2020-02-20") + t_end)
most_recent_date <- cases %>%
slice_tail(1) %>%
pull(Date)
most_recent_r <- R_df %>%
slice_tail(1) %>%
pull(`Mean(R)`)
case_table <- cases %>%
select(Date, ReportedNewCases, ReportedTotalCases) %>%
left_join(R_df %>% select(Date, `Mean(R)`))
# Plot R
png("RivCACOVID/incid.png", width = 800, height = 400)
incid <- plot(covid_parametric, "incid") +
scale_x_date(date_breaks = "1 month",
date_labels = "%B") +
theme_few()
incid
dev.off()
png("RivCACOVID/R.png", width = 800, height = 400)
plot(covid_parametric, "R", legend = FALSE)  +
theme_few() +
theme(legend.position = "none") +
coord_cartesian(ylim = c(0,3))
dev.off()
# Write data to cache
save(case_table, file = 'RivCACOVID/case_table.Rdata')
save(covid_parametric, file = 'RivCACOVID/covid_parametric.Rdata')
save(most_recent_date, file = 'RivCACOVID/most_recent_date.Rdata')
save(most_recent_r, file = 'RivCACOVID/most_recent_r.Rdata')
shiny::runApp('RivCACOVID')
# Get COVID Data from Riverside County ArcGIS
library(httr)
library(jsonlite)
library(tidyverse)
library(lubridate)
library(EpiEstim)
library(incidence)
library(RCurl)
library(ggthemes)
# Import data
r <- GET("https://services1.arcgis.com/pWmBUdSlVpXStHU6/arcgis/rest/services/COVID19_Cases_DateReport/FeatureServer/0/query?f=json&where=1%3D1&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=DateReported%20asc&outSR=102100&resultOffset=0&resultRecordCount=32000&resultType=standard&cacheHint=true")
r_json <- content(r)
cases <- fromJSON(
r_json
)$features$attributes %>%
mutate(
DateReported = as_datetime(DateReported / 1000),
Date = as_date(DateReported)
)
# Construct the curve
incidence <- as.incidence(
cases$ReportedNewCases,
dates = cases$Date
)
# Plot incidence
plot(incidence)
# Estimate R
covid_parametric <- estimate_R(
incidence,
method = "parametric_si",
config = make_config(list(
mean_si = 3.96,
std_si = 4.75
))
)
R_df <- covid_parametric$R %>%
mutate(Date = date("2020-02-20") + t_end)
most_recent_date <- cases %>%
slice_tail(1) %>%
pull(Date)
most_recent_r <- R_df %>%
slice_tail(1) %>%
pull(`Mean(R)`)
case_table <- cases %>%
select(Date, ReportedNewCases, ReportedTotalCases) %>%
left_join(R_df %>% select(Date, `Mean(R)`))
# Plot R
png("RivCACOVID/incid.png", width = 800, height = 400)
incid <- plot(covid_parametric, "incid") +
scale_x_date(date_breaks = "1 month",
date_labels = "%B") +
theme_few()
incid
dev.off()
png("RivCACOVID/R.png", width = 800, height = 400)
plot(covid_parametric, "R", legend = FALSE)  +
theme_few() +
theme(legend.position = "none") +
coord_cartesian(ylim = c(0,3))
dev.off()
# Write data to cache
save(case_table, file = 'RivCACOVID/case_table.Rdata')
save(covid_parametric, file = 'RivCACOVID/covid_parametric.Rdata')
save(most_recent_date, file = 'RivCACOVID/most_recent_date.Rdata')
save(most_recent_r, file = 'RivCACOVID/most_recent_r.Rdata')
shiny::runApp('RivCACOVID')
# Get COVID Data from Riverside County ArcGIS
library(httr)
library(jsonlite)
library(tidyverse)
library(lubridate)
library(EpiEstim)
library(incidence)
library(RCurl)
library(ggthemes)
# Import data
r <- GET("https://services1.arcgis.com/pWmBUdSlVpXStHU6/arcgis/rest/services/COVID19_Cases_DateReport/FeatureServer/0/query?f=json&where=1%3D1&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=DateReported%20asc&outSR=102100&resultOffset=0&resultRecordCount=32000&resultType=standard&cacheHint=true")
r_json <- content(r)
cases <- fromJSON(
r_json
)$features$attributes %>%
mutate(
DateReported = as_datetime(DateReported / 1000),
Date = as_date(DateReported)
)
# Construct the curve
incidence <- as.incidence(
cases$ReportedNewCases,
dates = cases$Date
)
# Plot incidence
plot(incidence)
# Estimate R
covid_parametric <- estimate_R(
incidence,
method = "parametric_si",
config = make_config(list(
mean_si = 3.96,
std_si = 4.75
))
)
R_df <- covid_parametric$R %>%
mutate(Date = date("2020-02-20") + t_end)
most_recent_date <- cases %>%
slice_tail(1) %>%
pull(Date)
most_recent_r <- R_df %>%
slice_tail(1) %>%
pull(`Mean(R)`)
case_table <- cases %>%
select(Date, ReportedNewCases, ReportedTotalCases) %>%
left_join(R_df %>% select(Date, `Mean(R)`))
# Plot R
png("RivCACOVID/incid.png", width = 800, height = 400)
incid <- plot(covid_parametric, "incid") +
scale_x_date(date_breaks = "1 month",
date_labels = "%B") +
theme_few()
incid
dev.off()
png("RivCACOVID/R.png", width = 800, height = 400)
plot(covid_parametric, "R", legend = FALSE)  +
theme_few() +
theme(legend.position = "none") +
coord_cartesian(ylim = c(0,3))
dev.off()
# Write data to cache
save(case_table, file = 'RivCACOVID/case_table.Rdata')
save(covid_parametric, file = 'RivCACOVID/covid_parametric.Rdata')
save(most_recent_date, file = 'RivCACOVID/most_recent_date.Rdata')
save(most_recent_r, file = 'RivCACOVID/most_recent_r.Rdata')
shiny::runApp('RivCACOVID')
# Get COVID Data from Riverside County ArcGIS
library(httr)
library(jsonlite)
library(tidyverse)
library(lubridate)
library(EpiEstim)
library(incidence)
library(RCurl)
library(ggthemes)
# Import data
r <- GET("https://services1.arcgis.com/pWmBUdSlVpXStHU6/arcgis/rest/services/COVID19_Cases_DateReport/FeatureServer/0/query?f=json&where=1%3D1&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=DateReported%20asc&outSR=102100&resultOffset=0&resultRecordCount=32000&resultType=standard&cacheHint=true")
r_json <- content(r)
cases <- fromJSON(
r_json
)$features$attributes %>%
mutate(
DateReported = as_datetime(DateReported / 1000),
Date = as_date(DateReported)
)
# Construct the curve
incidence <- as.incidence(
cases$ReportedNewCases,
dates = cases$Date
)
# Plot incidence
plot(incidence)
# Estimate R
covid_parametric <- estimate_R(
incidence,
method = "parametric_si",
config = make_config(list(
mean_si = 3.96,
std_si = 4.75
))
)
R_df <- covid_parametric$R %>%
mutate(Date = date("2020-02-20") + t_end)
most_recent_date <- cases %>%
slice_tail(1) %>%
pull(Date)
most_recent_r <- R_df %>%
slice_tail(1) %>%
pull(`Mean(R)`)
case_table <- cases %>%
select(Date, ReportedNewCases, ReportedTotalCases) %>%
left_join(R_df %>% select(Date, `Mean(R)`))
# Plot R
png("RivCACOVID/incid.png", width = 800, height = 400)
incid <- plot(covid_parametric, "incid") +
scale_x_date(date_breaks = "1 month",
date_labels = "%B") +
theme_few()
incid
dev.off()
png("RivCACOVID/R.png", width = 800, height = 400)
plot(covid_parametric, "R", legend = FALSE)  +
theme_few() +
theme(legend.position = "none") +
coord_cartesian(ylim = c(0,3))
dev.off()
# Write data to cache
save(case_table, file = 'RivCACOVID/case_table.Rdata')
save(covid_parametric, file = 'RivCACOVID/covid_parametric.Rdata')
save(most_recent_date, file = 'RivCACOVID/most_recent_date.Rdata')
save(most_recent_r, file = 'RivCACOVID/most_recent_r.Rdata')
shiny::runApp('RivCACOVID')
# Get COVID Data from Riverside County ArcGIS
library(httr)
library(jsonlite)
library(tidyverse)
library(lubridate)
library(EpiEstim)
library(incidence)
library(RCurl)
library(ggthemes)
# Import data
r <- GET("https://services1.arcgis.com/pWmBUdSlVpXStHU6/arcgis/rest/services/COVID19_Cases_DateReport/FeatureServer/0/query?f=json&where=1%3D1&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=DateReported%20asc&outSR=102100&resultOffset=0&resultRecordCount=32000&resultType=standard&cacheHint=true")
r_json <- content(r)
cases <- fromJSON(
r_json
)$features$attributes %>%
mutate(
DateReported = as_datetime(DateReported / 1000),
Date = as_date(DateReported)
)
# Construct the curve
incidence <- as.incidence(
cases$ReportedNewCases,
dates = cases$Date
)
# Plot incidence
plot(incidence)
# Estimate R
covid_parametric <- estimate_R(
incidence,
method = "parametric_si",
config = make_config(list(
mean_si = 3.96,
std_si = 4.75
))
)
R_df <- covid_parametric$R %>%
mutate(Date = date("2020-02-20") + t_end)
most_recent_date <- cases %>%
slice_tail(1) %>%
pull(Date)
most_recent_r <- R_df %>%
slice_tail(1) %>%
pull(`Mean(R)`)
case_table <- cases %>%
select(Date, ReportedNewCases, ReportedTotalCases) %>%
left_join(R_df %>% select(Date, `Mean(R)`))
# Plot R
png("RivCACOVID/incid.png", width = 800, height = 400)
incid <- plot(covid_parametric, "incid") +
scale_x_date(date_breaks = "1 month",
date_labels = "%B") +
theme_few()
incid
dev.off()
png("RivCACOVID/R.png", width = 800, height = 400)
plot(covid_parametric, "R", legend = FALSE)  +
theme_few() +
theme(legend.position = "none") +
coord_cartesian(ylim = c(0,3))
dev.off()
# Write data to cache
save(case_table, file = 'RivCACOVID/case_table.Rdata')
save(covid_parametric, file = 'RivCACOVID/covid_parametric.Rdata')
save(most_recent_date, file = 'RivCACOVID/most_recent_date.Rdata')
save(most_recent_r, file = 'RivCACOVID/most_recent_r.Rdata')
shiny::runApp('RivCACOVID')
# Get COVID Data from Riverside County ArcGIS
library(httr)
library(jsonlite)
library(tidyverse)
library(lubridate)
library(EpiEstim)
library(incidence)
library(RCurl)
library(ggthemes)
# Import data
r <- GET("https://services1.arcgis.com/pWmBUdSlVpXStHU6/arcgis/rest/services/COVID19_Cases_DateReport/FeatureServer/0/query?f=json&where=1%3D1&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=DateReported%20asc&outSR=102100&resultOffset=0&resultRecordCount=32000&resultType=standard&cacheHint=true")
r_json <- content(r)
cases <- fromJSON(
r_json
)$features$attributes %>%
mutate(
DateReported = as_datetime(DateReported / 1000),
Date = as_date(DateReported)
)
# Construct the curve
incidence <- as.incidence(
cases$ReportedNewCases,
dates = cases$Date
)
# Plot incidence
plot(incidence)
# Estimate R
covid_parametric <- estimate_R(
incidence,
method = "parametric_si",
config = make_config(list(
mean_si = 3.96,
std_si = 4.75
))
)
R_df <- covid_parametric$R %>%
mutate(Date = date("2020-02-20") + t_end)
most_recent_date <- cases %>%
slice_tail(1) %>%
pull(Date)
most_recent_r <- R_df %>%
slice_tail(1) %>%
pull(`Mean(R)`)
case_table <- cases %>%
select(Date, ReportedNewCases, ReportedTotalCases) %>%
left_join(R_df %>% select(Date, `Mean(R)`))
# Plot R
png("RivCACOVID/incid.png", width = 800, height = 400)
incid <- plot(covid_parametric, "incid") +
scale_x_date(date_breaks = "1 month",
date_labels = "%B") +
theme_few()
incid
dev.off()
png("RivCACOVID/R.png", width = 800, height = 400)
plot(covid_parametric, "R", legend = FALSE)  +
theme_few() +
theme(legend.position = "none") +
coord_cartesian(ylim = c(0,3))
dev.off()
# Write data to cache
save(case_table, file = 'RivCACOVID/case_table.Rdata')
save(covid_parametric, file = 'RivCACOVID/covid_parametric.Rdata')
save(most_recent_date, file = 'RivCACOVID/most_recent_date.Rdata')
save(most_recent_r, file = 'RivCACOVID/most_recent_r.Rdata')
shiny::runApp('RivCACOVID')
