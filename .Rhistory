p("I am not an epidemiologist, but wanted more detail on local incidence data than provided by Riverside County Public Health.
There are many assumptions that may not be met in order for this basic analysis to be completely accurate, such as
increase in case counts due to variations in testing rates. The weekly sliding window is intended to help smooth out effects
due to case counts dropping over the weekend, etc. Don't assume a single bad day represents an increase in transmission. A rising
R over multiple days indicates an increase in transmission."),
h4("Detailed Table"),
tableOutput('case_table')
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$yes_no <- renderText({
if_else(most_recent_r >= 1,
paste0(
h1("No"),
p(
"As of ",
most_recent_date,
", with an R value of ",
strong(round(most_recent_r,2)),
" , daily cases are still growing."
)
),
paste0(
h3("No"),
p(
"As of ",
most_recent_date,
", with an R value of ",
strong(round(most_recent_r,2)),
" , daily cases are still growing."
)
)
)
})
output$case_plot <- renderImage({
list(src = 'incid.png')
}, deleteFile = FALSE)
output$R_plot <- renderImage({
list(src = 'R.png')
}, deleteFile = FALSE)
output$case_table <- renderTable({
case_table %>%
arrange(desc(Date)) %>%
mutate(Date = as.character((Date)))
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(httr)
library(jsonlite)
library(tidyverse)
library(lubridate)
# Get COVID Data from Riverside County ArcGIS
library(httr)
library(jsonlite)
library(tidyverse)
library(lubridate)
library(EpiEstim)
library(incidence)
library(RCurl)
library(ggthemes)
# Import data
r <- GET("https://services1.arcgis.com/pWmBUdSlVpXStHU6/arcgis/rest/services/COVID19_Cases_DateReport/FeatureServer/0/query?f=json&where=1%3D1&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=DateReported%20asc&outSR=102100&resultOffset=0&resultRecordCount=32000&resultType=standard&cacheHint=true")
r_json <- content(r)
cases <- fromJSON(
r_json
)$features$attributes %>%
mutate(
DateReported = as_datetime(DateReported / 1000),
Date = as_date(DateReported)
)
# Construct the curve
incidence <- as.incidence(
cases$ReportedNewCases,
dates = cases$Date
)
# Plot incidence
plot(incidence)
# Estimate R
covid_parametric <- estimate_R(
incidence,
method = "parametric_si",
config = make_config(list(
mean_si = 3.96,
std_si = 4.75
))
)
R_df <- covid_parametric$R %>%
mutate(Date = date("2020-02-20") + t_end)
most_recent_date <- cases %>%
slice_tail(1) %>%
pull(Date)
most_recent_r <- R_df %>%
slice_tail(1) %>%
pull(`Mean(R)`)
case_table <- cases %>%
select(Date, ReportedNewCases, ReportedTotalCases) %>%
left_join(R_df %>% select(Date, `Mean(R)`))
# Plot R
png("RivCACOVID/incid.png", width = 800, height = 400)
incid <- plot(covid_parametric, "incid") +
scale_x_date(date_breaks = "1 month",
date_labels = "%B") +
theme_few()
incid
dev.off()
png("RivCACOVID/R.png", width = 800, height = 400)
plot(covid_parametric, "R", legend = FALSE)  +
theme_few() +
theme(legend.position = "none")
dev.off()
# Write data to cache
save(case_table, file = 'RivCACOVID/case_table.Rdata')
save(covid_parametric, file = 'RivCACOVID/covid_parametric.Rdata')
save(most_recent_date, file = 'RivCACOVID/most_recent_date.Rdata')
save(most_recent_r, file = 'RivCACOVID/most_recent_r.Rdata')
png("RivCACOVID/R.png", width = 800, height = 400)
plot(covid_parametric, "R", legend = FALSE)  +
theme_few() +
theme(legend.position = "none") +
coord_cartesian(ylim = 3)
png("RivCACOVID/R.png", width = 800, height = 400)
plot(covid_parametric, "R", legend = FALSE)  +
theme_few() +
theme(legend.position = "none") +
coord_cartesian(ylim = c(0,3))
dev.off()
# Get COVID Data from Riverside County ArcGIS
library(httr)
library(jsonlite)
library(tidyverse)
library(lubridate)
library(EpiEstim)
library(incidence)
library(RCurl)
library(ggthemes)
# Import data
r <- GET("https://services1.arcgis.com/pWmBUdSlVpXStHU6/arcgis/rest/services/COVID19_Cases_DateReport/FeatureServer/0/query?f=json&where=1%3D1&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=DateReported%20asc&outSR=102100&resultOffset=0&resultRecordCount=32000&resultType=standard&cacheHint=true")
r_json <- content(r)
cases <- fromJSON(
r_json
)$features$attributes %>%
mutate(
DateReported = as_datetime(DateReported / 1000),
Date = as_date(DateReported)
)
# Construct the curve
incidence <- as.incidence(
cases$ReportedNewCases,
dates = cases$Date
)
# Plot incidence
plot(incidence)
# Estimate R
covid_parametric <- estimate_R(
incidence,
method = "parametric_si",
config = make_config(list(
mean_si = 3.96,
std_si = 4.75
))
)
R_df <- covid_parametric$R %>%
mutate(Date = date("2020-02-20") + t_end)
most_recent_date <- cases %>%
slice_tail(1) %>%
pull(Date)
most_recent_r <- R_df %>%
slice_tail(1) %>%
pull(`Mean(R)`)
case_table <- cases %>%
select(Date, ReportedNewCases, ReportedTotalCases) %>%
left_join(R_df %>% select(Date, `Mean(R)`))
# Plot R
png("RivCACOVID/incid.png", width = 800, height = 400)
incid <- plot(covid_parametric, "incid") +
scale_x_date(date_breaks = "1 month",
date_labels = "%B") +
theme_few()
incid
dev.off()
png("RivCACOVID/R.png", width = 800, height = 400)
plot(covid_parametric, "R", legend = FALSE)  +
theme_few() +
theme(legend.position = "none") +
coord_cartesian(ylim = c(0,3))
dev.off()
# Write data to cache
save(case_table, file = 'RivCACOVID/case_table.Rdata')
save(covid_parametric, file = 'RivCACOVID/covid_parametric.Rdata')
save(most_recent_date, file = 'RivCACOVID/most_recent_date.Rdata')
save(most_recent_r, file = 'RivCACOVID/most_recent_r.Rdata')
runApp('RivCACOVID')
# Get COVID Data from Riverside County ArcGIS
library(httr)
library(jsonlite)
library(tidyverse)
library(lubridate)
library(EpiEstim)
library(incidence)
library(RCurl)
library(ggthemes)
# Import data
r <- GET("https://services1.arcgis.com/pWmBUdSlVpXStHU6/arcgis/rest/services/COVID19_Cases_DateReport/FeatureServer/0/query?f=json&where=1%3D1&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=DateReported%20asc&outSR=102100&resultOffset=0&resultRecordCount=32000&resultType=standard&cacheHint=true")
r_json <- content(r)
cases <- fromJSON(
r_json
)$features$attributes %>%
mutate(
DateReported = as_datetime(DateReported / 1000),
Date = as_date(DateReported)
)
# Construct the curve
incidence <- as.incidence(
cases$ReportedNewCases,
dates = cases$Date
)
# Plot incidence
plot(incidence)
# Estimate R
covid_parametric <- estimate_R(
incidence,
method = "parametric_si",
config = make_config(list(
mean_si = 3.96,
std_si = 4.75
))
)
R_df <- covid_parametric$R %>%
mutate(Date = date("2020-02-20") + t_end)
most_recent_date <- cases %>%
slice_tail(1) %>%
pull(Date)
most_recent_r <- R_df %>%
slice_tail(1) %>%
pull(`Mean(R)`)
case_table <- cases %>%
select(Date, ReportedNewCases, ReportedTotalCases) %>%
left_join(R_df %>% select(Date, `Mean(R)`))
# Plot R
png("RivCACOVID/incid.png", width = 800, height = 400)
incid <- plot(covid_parametric, "incid") +
scale_x_date(date_breaks = "1 month",
date_labels = "%B") +
theme_few()
incid
dev.off()
png("RivCACOVID/R.png", width = 800, height = 400)
plot(covid_parametric, "R", legend = FALSE)  +
theme_few() +
theme(legend.position = "none") +
coord_cartesian(ylim = c(0,3))
dev.off()
# Write data to cache
save(case_table, file = 'RivCACOVID/case_table.Rdata')
save(covid_parametric, file = 'RivCACOVID/covid_parametric.Rdata')
save(most_recent_date, file = 'RivCACOVID/most_recent_date.Rdata')
save(most_recent_r, file = 'RivCACOVID/most_recent_r.Rdata')
runApp('RivCACOVID')
# Get COVID Data from Riverside County ArcGIS
library(httr)
library(jsonlite)
library(tidyverse)
library(lubridate)
library(EpiEstim)
library(incidence)
library(RCurl)
library(ggthemes)
# Import data
r <- GET("https://services1.arcgis.com/pWmBUdSlVpXStHU6/arcgis/rest/services/COVID19_Cases_DateReport/FeatureServer/0/query?f=json&where=1%3D1&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=DateReported%20asc&outSR=102100&resultOffset=0&resultRecordCount=32000&resultType=standard&cacheHint=true")
r_json <- content(r)
cases <- fromJSON(
r_json
)$features$attributes %>%
mutate(
DateReported = as_datetime(DateReported / 1000),
Date = as_date(DateReported)
)
# Construct the curve
incidence <- as.incidence(
cases$ReportedNewCases,
dates = cases$Date
)
# Plot incidence
plot(incidence)
# Estimate R
covid_parametric <- estimate_R(
incidence,
method = "parametric_si",
config = make_config(list(
mean_si = 3.96,
std_si = 4.75
))
)
R_df <- covid_parametric$R %>%
mutate(Date = date("2020-02-20") + t_end)
most_recent_date <- cases %>%
slice_tail(1) %>%
pull(Date)
most_recent_r <- R_df %>%
slice_tail(1) %>%
pull(`Mean(R)`)
case_table <- cases %>%
select(Date, ReportedNewCases, ReportedTotalCases) %>%
left_join(R_df %>% select(Date, `Mean(R)`))
# Plot R
png("RivCACOVID/incid.png", width = 800, height = 400)
incid <- plot(covid_parametric, "incid") +
scale_x_date(date_breaks = "1 month",
date_labels = "%B") +
theme_few()
incid
dev.off()
png("RivCACOVID/R.png", width = 800, height = 400)
plot(covid_parametric, "R", legend = FALSE)  +
theme_few() +
theme(legend.position = "none") +
coord_cartesian(ylim = c(0,3))
dev.off()
# Write data to cache
save(case_table, file = 'RivCACOVID/case_table.Rdata')
save(covid_parametric, file = 'RivCACOVID/covid_parametric.Rdata')
save(most_recent_date, file = 'RivCACOVID/most_recent_date.Rdata')
save(most_recent_r, file = 'RivCACOVID/most_recent_r.Rdata')
shiny::runApp('RivCACOVID')
library(shiny)
library(incidence)
library(tidyverse)
# Import saved data
load('case_table.Rdata')
load('covid_parametric.Rdata')
print(covid_parametric)
load('most_recent_date.Rdata')
load('most_recent_r.Rdata')
# Get COVID Data from Riverside County ArcGIS
library(httr)
library(jsonlite)
library(tidyverse)
library(lubridate)
library(EpiEstim)
library(incidence)
library(RCurl)
library(ggthemes)
# Import data
r <- GET("https://services1.arcgis.com/pWmBUdSlVpXStHU6/arcgis/rest/services/COVID19_Cases_DateReport/FeatureServer/0/query?f=json&where=1%3D1&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=DateReported%20asc&outSR=102100&resultOffset=0&resultRecordCount=32000&resultType=standard&cacheHint=true")
r_json <- content(r)
cases <- fromJSON(
r_json
)$features$attributes %>%
mutate(
DateReported = as_datetime(DateReported / 1000),
Date = as_date(DateReported)
)
# Construct the curve
incidence <- as.incidence(
cases$ReportedNewCases,
dates = cases$Date
)
# Plot incidence
plot(incidence)
# Estimate R
covid_parametric <- estimate_R(
incidence,
method = "parametric_si",
config = make_config(list(
mean_si = 3.96,
std_si = 4.75
))
)
R_df <- covid_parametric$R %>%
mutate(Date = date("2020-02-20") + t_end)
most_recent_date <- cases %>%
slice_tail(1) %>%
pull(Date)
most_recent_r <- R_df %>%
slice_tail(1) %>%
pull(`Mean(R)`)
case_table <- cases %>%
select(Date, ReportedNewCases, ReportedTotalCases) %>%
left_join(R_df %>% select(Date, `Mean(R)`))
# Get COVID Data from Riverside County ArcGIS
library(httr)
library(jsonlite)
library(tidyverse)
library(lubridate)
library(EpiEstim)
library(incidence)
library(RCurl)
library(ggthemes)
# Import data
r <- GET("https://services1.arcgis.com/pWmBUdSlVpXStHU6/arcgis/rest/services/COVID19_Cases_DateReport/FeatureServer/0/query?f=json&where=1%3D1&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=DateReported%20asc&outSR=102100&resultOffset=0&resultRecordCount=32000&resultType=standard&cacheHint=true")
r_json <- content(r)
cases <- fromJSON(
r_json
)$features$attributes %>%
mutate(
DateReported = as_datetime(DateReported / 1000),
Date = as_date(DateReported)
)
# Construct the curve
incidence <- as.incidence(
cases$ReportedNewCases,
dates = cases$Date
)
# Plot incidence
plot(incidence)
# Estimate R
covid_parametric <- estimate_R(
incidence,
method = "parametric_si",
config = make_config(list(
mean_si = 3.96,
std_si = 4.75
))
)
R_df <- covid_parametric$R %>%
mutate(Date = date("2020-02-20") + t_end)
most_recent_date <- cases %>%
slice_tail(1) %>%
pull(Date)
most_recent_r <- R_df %>%
slice_tail(1) %>%
pull(`Mean(R)`)
case_table <- cases %>%
select(Date, ReportedNewCases, ReportedTotalCases) %>%
left_join(R_df %>% select(Date, `Mean(R)`))
# Plot R
png("RivCACOVID/incid.png", width = 800, height = 400)
incid <- plot(covid_parametric, "incid") +
scale_x_date(date_breaks = "1 month",
date_labels = "%B") +
theme_few()
incid
dev.off()
png("RivCACOVID/R.png", width = 800, height = 400)
plot(covid_parametric, "R", legend = FALSE)  +
theme_few() +
theme(legend.position = "none") +
coord_cartesian(ylim = c(0,3))
dev.off()
# Write data to cache
save(case_table, file = 'RivCACOVID/case_table.Rdata')
save(covid_parametric, file = 'RivCACOVID/covid_parametric.Rdata')
save(most_recent_date, file = 'RivCACOVID/most_recent_date.Rdata')
save(most_recent_r, file = 'RivCACOVID/most_recent_r.Rdata')
runApp('RivCACOVID')
# Get COVID Data from Riverside County ArcGIS
library(httr)
library(jsonlite)
library(tidyverse)
library(lubridate)
library(EpiEstim)
library(incidence)
library(RCurl)
library(ggthemes)
# Import data
r <- GET("https://services1.arcgis.com/pWmBUdSlVpXStHU6/arcgis/rest/services/COVID19_Cases_DateReport/FeatureServer/0/query?f=json&where=1%3D1&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=DateReported%20asc&outSR=102100&resultOffset=0&resultRecordCount=32000&resultType=standard&cacheHint=true")
r_json <- content(r)
cases <- fromJSON(
r_json
)$features$attributes %>%
mutate(
DateReported = as_datetime(DateReported / 1000),
Date = as_date(DateReported)
)
# Construct the curve
incidence <- as.incidence(
cases$ReportedNewCases,
dates = cases$Date
)
# Plot incidence
plot(incidence)
# Estimate R
covid_parametric <- estimate_R(
incidence,
method = "parametric_si",
config = make_config(list(
mean_si = 3.96,
std_si = 4.75
))
)
R_df <- covid_parametric$R %>%
mutate(Date = date("2020-02-20") + t_end)
most_recent_date <- cases %>%
slice_tail(1) %>%
pull(Date)
most_recent_r <- R_df %>%
slice_tail(1) %>%
pull(`Mean(R)`)
case_table <- cases %>%
select(Date, ReportedNewCases, ReportedTotalCases) %>%
left_join(R_df %>% select(Date, `Mean(R)`))
# Plot R
png("RivCACOVID/incid.png", width = 800, height = 400)
incid <- plot(covid_parametric, "incid") +
scale_x_date(date_breaks = "1 month",
date_labels = "%B") +
theme_few()
incid
dev.off()
png("RivCACOVID/R.png", width = 800, height = 400)
plot(covid_parametric, "R", legend = FALSE)  +
theme_few() +
theme(legend.position = "none") +
coord_cartesian(ylim = c(0,3))
dev.off()
# Write data to cache
save(case_table, file = 'RivCACOVID/case_table.Rdata')
save(covid_parametric, file = 'RivCACOVID/covid_parametric.Rdata')
save(most_recent_date, file = 'RivCACOVID/most_recent_date.Rdata')
save(most_recent_r, file = 'RivCACOVID/most_recent_r.Rdata')
shiny::runApp('RivCACOVID')
